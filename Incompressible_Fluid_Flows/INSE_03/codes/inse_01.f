! Auto-generated by generate_code.py

module INSE_01

implicit none

! Global constants
real(8), parameter :: rO = 1.0
real(8), parameter :: rI = 0.5
real(8), parameter :: nu = 1.0
real(8), parameter :: rho = 1.0
real(8), parameter :: omegaO = 1.0
real(8), parameter :: omegaI = -2.0
real(8), parameter :: pi = 3.141592653589793

contains

! Function p
function p(x, y) result(res)
    real(8), intent(in) :: x
    real(8), intent(in) :: y
    real(8) :: res
    res = rI*rho*cos(0.5d0*alpha*theta)/r
end function p

! Subroutine u
subroutine u(x, y, res)
    real(8), intent(in) :: x
    real(8), intent(in) :: y
    real(8), intent(out) :: res(2)
    res(1) = (1.0d0/2.0d0)*alpha*u0*(-rI + rO)*sin(0.5d0*alpha*theta)*sin(beta*pi*(r - rI)/(-rI + rO)) &
        *cos(theta)/(beta*pi*r) - u0*sin(theta)*cos( 0.5d0*alpha*theta)*cos(beta*pi*(r - rI)/(-rI + rO))
    res(2) = (1.0d0/2.0d0)*alpha*u0*(-rI + rO)*sin(theta)*sin(0.5d0*alpha*theta)*sin( beta*pi*(r - rI) &
        /(-rI + rO))/(beta*pi*r) + u0*cos(theta)*cos( 0.5d0*alpha*theta)*cos(beta*pi*(r - rI)/(-rI &
        + rO))
end subroutine u

! Subroutine f
subroutine f(x, y, res)
    real(8), intent(in) :: x
    real(8), intent(in) :: y
    real(8), intent(out) :: res(2)
    res(1) = -(alpha**2*beta*nu*pi*r*rI**2*u0*cos(0.5d0*alpha*theta)*cos(beta*pi*r/( rI - rO) - beta*pi &
        *rI/(rI - rO)) - 2*alpha**2*beta*nu*pi*r*rI*rO* u0*cos(0.5d0*alpha*theta)*cos(beta*pi*r/(rI &
        - rO) - beta*pi*rI/( rI - rO)) + alpha**2*beta*nu*pi*r*rO**2*u0*cos(0.5d0*alpha*theta) &
        *cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) - 2*alpha**2*nu* rI**3*u0*sin(beta*pi*r/(rI &
        - rO) - beta*pi*rI/(rI - rO))*cos( 0.5d0*alpha*theta) + 6*alpha**2*nu*rI**2*rO*u0*sin(beta*pi*r &
        /(rI - rO) - beta*pi*rI/(rI - rO))*cos(0.5d0*alpha*theta) - 6*alpha**2 *nu*rI*rO**2*u0*sin(beta &
        *pi*r/(rI - rO) - beta*pi*rI/(rI - rO))* cos(0.5d0*alpha*theta) + 2*alpha**2*nu*rO**3*u0 &
        *sin(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))*cos(0.5d0*alpha*theta) - 2*alpha* beta*pi*r**2 &
        *rI**2*u0**2*sin(0.5d0*alpha*theta)*sin(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))**2 &
        *cos(0.5d0*alpha*theta) - 2*alpha *beta*pi*r**2*rI**2*u0**2*sin(0.5d0*alpha*theta)*cos(0.5d0 &
        *alpha* theta)*cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))**2 + 4* alpha*beta*pi*r**2*rI*rO &
        *u0**2*sin(0.5d0*alpha*theta)*sin(beta*pi *r/(rI - rO) - beta*pi*rI/(rI - rO))**2*cos(0.5d0 &
        *alpha*theta) + 4*alpha*beta*pi*r**2*rI*rO*u0**2*sin(0.5d0*alpha*theta)*cos(0.5d0 *alpha*theta) &
        *cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))**2 - 2*alpha*beta*pi*r**2*rO**2*u0**2 &
        *sin(0.5d0*alpha*theta)*sin( beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))**2*cos(0.5d0*alpha &
        * theta) - 2*alpha*beta*pi*r**2*rO**2*u0**2*sin(0.5d0*alpha*theta)* cos(0.5d0*alpha*theta) &
        *cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))**2 - 2*alpha*beta*pi*r*rI**3*sin(0.5d0*alpha &
        *theta) + 4* alpha*beta*pi*r*rI**2*rO*sin(0.5d0*alpha*theta) - 2*alpha*beta*pi *r*rI*rO**2 &
        *sin(0.5d0*alpha*theta) + 2*alpha*r*rI**3*u0**2*sin( 0.5d0*alpha*theta)*sin(beta*pi*r/(rI &
        - rO) - beta*pi*rI/(rI - rO ))*cos(0.5d0*alpha*theta)*cos(beta*pi*r/(rI - rO) - beta*pi*rI &
        /( rI - rO)) - 6*alpha*r*rI**2*rO*u0**2*sin(0.5d0*alpha*theta)*sin( beta*pi*r/(rI - rO) - beta &
        *pi*rI/(rI - rO))*cos(0.5d0*alpha*theta )*cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) + 6 &
        *alpha*r*rI* rO**2*u0**2*sin(0.5d0*alpha*theta)*sin(beta*pi*r/(rI - rO) - beta *pi*rI/(rI &
        - rO))*cos(0.5d0*alpha*theta)*cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) - 2*alpha*r*rO**3 &
        *u0**2*sin(0.5d0*alpha* theta)*sin(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))*cos(0.5d0* alpha &
        *theta)*cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) + 4* beta**3*nu*pi**3*r**3*u0*cos(0.5d0 &
        *alpha*theta)*cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) + 4*beta**2*nu*pi**2*r**2*rI*u0 &
        *sin (beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))*cos(0.5d0*alpha* theta) - 4*beta**2*nu*pi**2 &
        *r**2*rO*u0*sin(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))*cos(0.5d0*alpha*theta) + 4*beta*nu &
        *pi*r*rI **2*u0*cos(0.5d0*alpha*theta)*cos(beta*pi*r/(rI - rO) - beta*pi* rI/(rI - rO)) - 8 &
        *beta*nu*pi*r*rI*rO*u0*cos(0.5d0*alpha*theta)* cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) &
        + 4*beta*nu*pi*r* rO**2*u0*cos(0.5d0*alpha*theta)*cos(beta*pi*r/(rI - rO) - beta*pi *rI/(rI &
        - rO)))*sin(theta)/(4*beta*pi*r**3*rI**2 - 8*beta*pi*r**3 *rI*rO + 4*beta*pi*r**3*rO**2) &
        + (alpha**3*beta*nu*pi*rI**2*u0* sin(0.5d0*alpha*theta)*sin(beta*pi*r/(rI - rO) - beta*pi*rI &
        /(rI - rO)) - 2*alpha**3*beta*nu*pi*rI*rO*u0*sin(0.5d0*alpha*theta)*sin( beta*pi*r/(rI - rO) &
        - beta*pi*rI/(rI - rO)) + alpha**3*beta*nu*pi *rO**2*u0*sin(0.5d0*alpha*theta)*sin(beta*pi*r &
        /(rI - rO) - beta* pi*rI/(rI - rO)) + 2*alpha**2*beta*pi*r*rI**2*u0**2*sin(0.5d0* alpha*theta)* &
        *2*sin(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))* cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI &
        - rO)) + 2*alpha**2*beta *pi*r*rI**2*u0**2*sin(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) &
        *cos(0.5d0*alpha*theta)**2*cos(beta*pi*r/(rI - rO) - beta*pi*rI/( rI - rO)) - 4*alpha**2*beta &
        *pi*r*rI*rO*u0**2*sin(0.5d0*alpha* theta)**2*sin(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) &
        *cos( beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) - 4*alpha**2*beta*pi* r*rI*rO*u0**2*sin(beta &
        *pi*r/(rI - rO) - beta*pi*rI/(rI - rO))*cos (0.5d0*alpha*theta)**2*cos(beta*pi*r/(rI - rO) &
        - beta*pi*rI/(rI - rO)) + 2*alpha**2*beta*pi*r*rO**2*u0**2*sin(0.5d0*alpha*theta)**2 *sin(beta &
        *pi*r/(rI - rO) - beta*pi*rI/(rI - rO))*cos(beta*pi*r/( rI - rO) - beta*pi*rI/(rI - rO)) + 2 &
        *alpha**2*beta*pi*r*rO**2*u0 **2*sin(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))*cos(0.5d0 &
        * alpha*theta)**2*cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) - 2*alpha**2*rI**3*u0**2 &
        *sin(0.5d0*alpha*theta)**2*sin(beta*pi*r/( rI - rO) - beta*pi*rI/(rI - rO))**2 + 6*alpha**2*rI* &
        *2*rO*u0**2* sin(0.5d0*alpha*theta)**2*sin(beta*pi*r/(rI - rO) - beta*pi*rI/( rI - rO))**2 - 6 &
        *alpha**2*rI*rO**2*u0**2*sin(0.5d0*alpha*theta)** 2*sin(beta*pi*r/(rI - rO) - beta*pi*rI/(rI &
        - rO))**2 + 2*alpha**2 *rO**3*u0**2*sin(0.5d0*alpha*theta)**2*sin(beta*pi*r/(rI - rO) - beta*pi &
        *rI/(rI - rO))**2 + 4*alpha*beta**3*nu*pi**3*r**2*u0*sin( 0.5d0*alpha*theta)*sin(beta*pi*r/(rI &
        - rO) - beta*pi*rI/(rI - rO )) - 4*alpha*beta**2*nu*pi**2*r*rI*u0*sin(0.5d0*alpha*theta) &
        *cos( beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) + 4*alpha*beta**2*nu* pi**2*r*rO*u0*sin(0.5d0 &
        *alpha*theta)*cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) - 8*beta**2*pi**2*r**2*rI*u0**2 &
        *cos(0.5d0* alpha*theta)**2*cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))** 2 + 8*beta**2*pi* &
        *2*r**2*rO*u0**2*cos(0.5d0*alpha*theta)**2*cos( beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))**2 &
        - 8*beta**2*pi**2* r*rI**2*cos(0.5d0*alpha*theta) + 8*beta**2*pi**2*r*rI*rO*cos( 0.5d0*alpha &
        *theta))*cos(theta)/(8*beta**2*pi**2*r**3*rI - 8*beta **2*pi**2*r**3*rO)
    res(2) = (alpha**2*beta*nu*pi*r*rI**2*u0*cos(0.5d0*alpha*theta)*cos(beta*pi*r/(rI - rO) - beta*pi &
        *rI/(rI - rO)) - 2*alpha**2*beta*nu*pi*r*rI*rO*u0* cos(0.5d0*alpha*theta)*cos(beta*pi*r/(rI &
        - rO) - beta*pi*rI/(rI - rO)) + alpha**2*beta*nu*pi*r*rO**2*u0*cos(0.5d0*alpha*theta)*cos( beta &
        *pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) - 2*alpha**2*nu*rI**3 *u0*sin(beta*pi*r/(rI - rO) &
        - beta*pi*rI/(rI - rO))*cos(0.5d0* alpha*theta) + 6*alpha**2*nu*rI**2*rO*u0*sin(beta*pi*r/(rI &
        - rO) - beta*pi*rI/(rI - rO))*cos(0.5d0*alpha*theta) - 6*alpha**2*nu*rI *rO**2*u0*sin(beta*pi*r &
        /(rI - rO) - beta*pi*rI/(rI - rO))*cos( 0.5d0*alpha*theta) + 2*alpha**2*nu*rO**3*u0*sin(beta*pi &
        *r/(rI - rO) - beta*pi*rI/(rI - rO))*cos(0.5d0*alpha*theta) - 2*alpha*beta *pi*r**2*rI**2*u0**2 &
        *sin(0.5d0*alpha*theta)*sin(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))**2*cos(0.5d0*alpha &
        *theta) - 2*alpha* beta*pi*r**2*rI**2*u0**2*sin(0.5d0*alpha*theta)*cos(0.5d0*alpha* theta) &
        *cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))**2 + 4* alpha*beta*pi*r**2*rI*rO*u0**2 &
        *sin(0.5d0*alpha*theta)*sin(beta*pi *r/(rI - rO) - beta*pi*rI/(rI - rO))**2*cos(0.5d0*alpha &
        *theta) + 4*alpha*beta*pi*r**2*rI*rO*u0**2*sin(0.5d0*alpha*theta)*cos(0.5d0 *alpha*theta) &
        *cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))**2 - 2*alpha*beta*pi*r**2*rO**2*u0**2 &
        *sin(0.5d0*alpha*theta)*sin( beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))**2*cos(0.5d0*alpha &
        * theta) - 2*alpha*beta*pi*r**2*rO**2*u0**2*sin(0.5d0*alpha*theta)* cos(0.5d0*alpha*theta) &
        *cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))**2 - 2*alpha*beta*pi*r*rI**3*sin(0.5d0*alpha &
        *theta) + 4* alpha*beta*pi*r*rI**2*rO*sin(0.5d0*alpha*theta) - 2*alpha*beta*pi *r*rI*rO**2 &
        *sin(0.5d0*alpha*theta) + 2*alpha*r*rI**3*u0**2*sin( 0.5d0*alpha*theta)*sin(beta*pi*r/(rI &
        - rO) - beta*pi*rI/(rI - rO ))*cos(0.5d0*alpha*theta)*cos(beta*pi*r/(rI - rO) - beta*pi*rI &
        /( rI - rO)) - 6*alpha*r*rI**2*rO*u0**2*sin(0.5d0*alpha*theta)*sin( beta*pi*r/(rI - rO) - beta &
        *pi*rI/(rI - rO))*cos(0.5d0*alpha*theta )*cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) + 6 &
        *alpha*r*rI* rO**2*u0**2*sin(0.5d0*alpha*theta)*sin(beta*pi*r/(rI - rO) - beta *pi*rI/(rI &
        - rO))*cos(0.5d0*alpha*theta)*cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) - 2*alpha*r*rO**3 &
        *u0**2*sin(0.5d0*alpha* theta)*sin(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))*cos(0.5d0* alpha &
        *theta)*cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) + 4* beta**3*nu*pi**3*r**3*u0*cos(0.5d0 &
        *alpha*theta)*cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) + 4*beta**2*nu*pi**2*r**2*rI*u0 &
        *sin (beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))*cos(0.5d0*alpha* theta) - 4*beta**2*nu*pi**2 &
        *r**2*rO*u0*sin(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))*cos(0.5d0*alpha*theta) + 4*beta*nu &
        *pi*r*rI **2*u0*cos(0.5d0*alpha*theta)*cos(beta*pi*r/(rI - rO) - beta*pi* rI/(rI - rO)) - 8 &
        *beta*nu*pi*r*rI*rO*u0*cos(0.5d0*alpha*theta)* cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) &
        + 4*beta*nu*pi*r* rO**2*u0*cos(0.5d0*alpha*theta)*cos(beta*pi*r/(rI - rO) - beta*pi *rI/(rI &
        - rO)))*cos(theta)/(4*beta*pi*r**3*rI**2 - 8*beta*pi*r**3 *rI*rO + 4*beta*pi*r**3*rO**2) &
        + (alpha**3*beta*nu*pi*rI**2*u0* sin(0.5d0*alpha*theta)*sin(beta*pi*r/(rI - rO) - beta*pi*rI &
        /(rI - rO)) - 2*alpha**3*beta*nu*pi*rI*rO*u0*sin(0.5d0*alpha*theta)*sin( beta*pi*r/(rI - rO) &
        - beta*pi*rI/(rI - rO)) + alpha**3*beta*nu*pi *rO**2*u0*sin(0.5d0*alpha*theta)*sin(beta*pi*r &
        /(rI - rO) - beta* pi*rI/(rI - rO)) + 2*alpha**2*beta*pi*r*rI**2*u0**2*sin(0.5d0* alpha*theta)* &
        *2*sin(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))* cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI &
        - rO)) + 2*alpha**2*beta *pi*r*rI**2*u0**2*sin(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) &
        *cos(0.5d0*alpha*theta)**2*cos(beta*pi*r/(rI - rO) - beta*pi*rI/( rI - rO)) - 4*alpha**2*beta &
        *pi*r*rI*rO*u0**2*sin(0.5d0*alpha* theta)**2*sin(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) &
        *cos( beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) - 4*alpha**2*beta*pi* r*rI*rO*u0**2*sin(beta &
        *pi*r/(rI - rO) - beta*pi*rI/(rI - rO))*cos (0.5d0*alpha*theta)**2*cos(beta*pi*r/(rI - rO) &
        - beta*pi*rI/(rI - rO)) + 2*alpha**2*beta*pi*r*rO**2*u0**2*sin(0.5d0*alpha*theta)**2 *sin(beta &
        *pi*r/(rI - rO) - beta*pi*rI/(rI - rO))*cos(beta*pi*r/( rI - rO) - beta*pi*rI/(rI - rO)) + 2 &
        *alpha**2*beta*pi*r*rO**2*u0 **2*sin(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))*cos(0.5d0 &
        * alpha*theta)**2*cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) - 2*alpha**2*rI**3*u0**2 &
        *sin(0.5d0*alpha*theta)**2*sin(beta*pi*r/( rI - rO) - beta*pi*rI/(rI - rO))**2 + 6*alpha**2*rI* &
        *2*rO*u0**2* sin(0.5d0*alpha*theta)**2*sin(beta*pi*r/(rI - rO) - beta*pi*rI/( rI - rO))**2 - 6 &
        *alpha**2*rI*rO**2*u0**2*sin(0.5d0*alpha*theta)** 2*sin(beta*pi*r/(rI - rO) - beta*pi*rI/(rI &
        - rO))**2 + 2*alpha**2 *rO**3*u0**2*sin(0.5d0*alpha*theta)**2*sin(beta*pi*r/(rI - rO) - beta*pi &
        *rI/(rI - rO))**2 + 4*alpha*beta**3*nu*pi**3*r**2*u0*sin( 0.5d0*alpha*theta)*sin(beta*pi*r/(rI &
        - rO) - beta*pi*rI/(rI - rO )) - 4*alpha*beta**2*nu*pi**2*r*rI*u0*sin(0.5d0*alpha*theta) &
        *cos( beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) + 4*alpha*beta**2*nu* pi**2*r*rO*u0*sin(0.5d0 &
        *alpha*theta)*cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO)) - 8*beta**2*pi**2*r**2*rI*u0**2 &
        *cos(0.5d0* alpha*theta)**2*cos(beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))** 2 + 8*beta**2*pi* &
        *2*r**2*rO*u0**2*cos(0.5d0*alpha*theta)**2*cos( beta*pi*r/(rI - rO) - beta*pi*rI/(rI - rO))**2 &
        - 8*beta**2*pi**2* r*rI**2*cos(0.5d0*alpha*theta) + 8*beta**2*pi**2*r*rI*rO*cos( 0.5d0*alpha &
        *theta))*sin(theta)/(8*beta**2*pi**2*r**3*rI - 8*beta **2*pi**2*r**3*rO)
end subroutine f

! Function g
function g(x, y) result(res)
    real(8), intent(in) :: x
    real(8), intent(in) :: y
    real(8) :: res
    res = 0
end function g

end module inse_01
