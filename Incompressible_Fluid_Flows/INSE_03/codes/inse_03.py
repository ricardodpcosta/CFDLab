# Auto-generated by generate_code.py

import math

# Global constants
rO = 1.0
rI = 0.5
nu = 1.0
rho = 1.0
u0 = 1.0
alpha = 4.0
beta = 1.0
pi = 3.141592653589793

# Function p
def p(x, y):
    res = rI*rho*math.cos((1/2)*alpha*theta)/r
    return res

# Function u
def u(x, y):
    res = [0.0]*2
    res[0] = (1/2)*alpha*u0*(-rI + rO)*math.sin((1/2)*alpha*theta)*math.sin(beta*pi*(r - rI)/(-rI \
        + rO))*math.cos(theta)/(beta*pi*r) - u0*math.sin(theta)*math.cos((1/2)*alpha*theta) \
        *math.cos(beta*pi*(r - rI)/(-rI + rO))
    res[1] = (1/2)*alpha*u0*(-rI + rO)*math.sin(theta)*math.sin((1/2)*alpha*theta)*math.sin(beta*pi*(r \
        - rI)/(-rI + rO))/(beta*pi*r) + u0*math.cos(theta)*math.cos((1/2)*alpha*theta)*math.cos(beta*pi \
        *(r - rI)/(-rI + rO))
    return res

# Function f
def f(x, y):
    res = [0.0]*2
    res[0] = -(4*alpha**2*beta*nu*pi*r*rI**2*u0*math.cos((1/2)*alpha*theta)*math.cos(beta*pi*(r - rI) \
        /(rI - rO)) - 8*alpha**2*beta*nu*pi*r*rI*rO*u0*math.cos((1/2)*alpha*theta)*math.cos(beta*pi*(r \
        - rI)/(rI - rO)) + 4*alpha**2*beta*nu*pi*r*rO**2*u0*math.cos((1/2)*alpha*theta)*math.cos(beta \
        *pi*(r - rI)/(rI - rO)) - 8*alpha**2*nu*rI**3*u0*math.sin(beta*pi*(r - rI)/(rI - rO)) \
        *math.cos((1/2)*alpha*theta) + 24*alpha**2*nu*rI**2*rO*u0*math.sin(beta*pi*(r - rI)/(rI - rO)) \
        *math.cos((1/2)*alpha*theta) - 24*alpha**2*nu*rI*rO**2*u0*math.sin(beta*pi*(r - rI)/(rI - rO)) \
        *math.cos((1/2)*alpha*theta) + 8*alpha**2*nu*rO**3*u0*math.sin(beta*pi*(r - rI)/(rI - rO)) \
        *math.cos((1/2)*alpha*theta) - 4*alpha*beta*pi*r**2*rI**2*u0**2*math.sin(alpha*theta) + 8*alpha \
        *beta*pi*r**2*rI*rO*u0**2*math.sin(alpha*theta) - 4*alpha*beta*pi*r**2*rO**2*u0**2 \
        *math.sin(alpha*theta) - 8*alpha*beta*pi*r*rI**3*math.sin((1/2)*alpha*theta) + 16*alpha*beta*pi \
        *r*rI**2*rO*math.sin((1/2)*alpha*theta) - 8*alpha*beta*pi*r*rI*rO**2*math.sin((1/2)*alpha \
        *theta) + alpha*r*rI**3*u0**2*math.cos(alpha*theta - 2*beta*pi*r/(rI - rO) + 2*beta*pi*rI/(rI \
        - rO)) - alpha*r*rI**3*u0**2*math.cos(alpha*theta + 2*beta*pi*r/(rI - rO) - 2*beta*pi*rI/(rI \
        - rO)) - 3*alpha*r*rI**2*rO*u0**2*math.cos(alpha*theta - 2*beta*pi*r/(rI - rO) + 2*beta*pi*rI \
        /(rI - rO)) + 3*alpha*r*rI**2*rO*u0**2*math.cos(alpha*theta + 2*beta*pi*r/(rI - rO) - 2*beta*pi \
        *rI/(rI - rO)) + 3*alpha*r*rI*rO**2*u0**2*math.cos(alpha*theta - 2*beta*pi*r/(rI - rO) + 2*beta \
        *pi*rI/(rI - rO)) - 3*alpha*r*rI*rO**2*u0**2*math.cos(alpha*theta + 2*beta*pi*r/(rI - rO) - 2 \
        *beta*pi*rI/(rI - rO)) - alpha*r*rO**3*u0**2*math.cos(alpha*theta - 2*beta*pi*r/(rI - rO) + 2 \
        *beta*pi*rI/(rI - rO)) + alpha*r*rO**3*u0**2*math.cos(alpha*theta + 2*beta*pi*r/(rI - rO) - 2 \
        *beta*pi*rI/(rI - rO)) + 16*beta**3*nu*pi**3*r**3*u0*math.cos((1/2)*alpha*theta)*math.cos(beta \
        *pi*(r - rI)/(rI - rO)) + 16*beta**2*nu*pi**2*r**2*rI*u0*math.sin(beta*pi*(r - rI)/(rI - rO)) \
        *math.cos((1/2)*alpha*theta) - 16*beta**2*nu*pi**2*r**2*rO*u0*math.sin(beta*pi*(r - rI)/(rI \
        - rO))*math.cos((1/2)*alpha*theta) + 16*beta*nu*pi*r*rI**2*u0*math.cos((1/2)*alpha*theta) \
        *math.cos(beta*pi*(r - rI)/(rI - rO)) - 32*beta*nu*pi*r*rI*rO*u0*math.cos((1/2)*alpha*theta) \
        *math.cos(beta*pi*(r - rI)/(rI - rO)) + 16*beta*nu*pi*r*rO**2*u0*math.cos((1/2)*alpha*theta) \
        *math.cos(beta*pi*(r - rI)/(rI - rO)))*math.sin(theta)/(16*beta*pi*r**3*rI**2 - 32*beta*pi*r**3 \
        *rI*rO + 16*beta*pi*r**3*rO**2) + (alpha**3*beta*nu*pi*rI**2*u0*math.sin((1/2)*alpha*theta) \
        *math.sin(beta*pi*(r - rI)/(rI - rO)) - 2*alpha**3*beta*nu*pi*rI*rO*u0*math.sin((1/2)*alpha \
        *theta)*math.sin(beta*pi*(r - rI)/(rI - rO)) + alpha**3*beta*nu*pi*rO**2*u0*math.sin((1/2) \
        *alpha*theta)*math.sin(beta*pi*(r - rI)/(rI - rO)) + 2*alpha**2*beta*pi*r*rI**2*u0**2 \
        *math.sin((1/2)*alpha*theta)**2*math.sin(beta*pi*(r - rI)/(rI - rO))*math.cos(beta*pi*(r - rI) \
        /(rI - rO)) + 2*alpha**2*beta*pi*r*rI**2*u0**2*math.sin(beta*pi*(r - rI)/(rI - rO))*math.cos((1 \
        /2)*alpha*theta)**2*math.cos(beta*pi*(r - rI)/(rI - rO)) - 4*alpha**2*beta*pi*r*rI*rO*u0**2 \
        *math.sin((1/2)*alpha*theta)**2*math.sin(beta*pi*(r - rI)/(rI - rO))*math.cos(beta*pi*(r - rI) \
        /(rI - rO)) - 4*alpha**2*beta*pi*r*rI*rO*u0**2*math.sin(beta*pi*(r - rI)/(rI - rO))*math.cos((1 \
        /2)*alpha*theta)**2*math.cos(beta*pi*(r - rI)/(rI - rO)) + 2*alpha**2*beta*pi*r*rO**2*u0**2 \
        *math.sin((1/2)*alpha*theta)**2*math.sin(beta*pi*(r - rI)/(rI - rO))*math.cos(beta*pi*(r - rI) \
        /(rI - rO)) + 2*alpha**2*beta*pi*r*rO**2*u0**2*math.sin(beta*pi*(r - rI)/(rI - rO))*math.cos((1 \
        /2)*alpha*theta)**2*math.cos(beta*pi*(r - rI)/(rI - rO)) - 2*alpha**2*rI**3*u0**2*math.sin((1 \
        /2)*alpha*theta)**2*math.sin(beta*pi*(r - rI)/(rI - rO))**2 + 6*alpha**2*rI**2*rO*u0**2 \
        *math.sin((1/2)*alpha*theta)**2*math.sin(beta*pi*(r - rI)/(rI - rO))**2 - 6*alpha**2*rI*rO**2 \
        *u0**2*math.sin((1/2)*alpha*theta)**2*math.sin(beta*pi*(r - rI)/(rI - rO))**2 + 2*alpha**2*rO* \
        *3*u0**2*math.sin((1/2)*alpha*theta)**2*math.sin(beta*pi*(r - rI)/(rI - rO))**2 + 4*alpha*beta* \
        *3*nu*pi**3*r**2*u0*math.sin((1/2)*alpha*theta)*math.sin(beta*pi*(r - rI)/(rI - rO)) - 4*alpha \
        *beta**2*nu*pi**2*r*rI*u0*math.sin((1/2)*alpha*theta)*math.cos(beta*pi*(r - rI)/(rI - rO)) + 4 \
        *alpha*beta**2*nu*pi**2*r*rO*u0*math.sin((1/2)*alpha*theta)*math.cos(beta*pi*(r - rI)/(rI \
        - rO)) - 8*beta**2*pi**2*r**2*rI*u0**2*math.cos((1/2)*alpha*theta)**2*math.cos(beta*pi*(r - rI) \
        /(rI - rO))**2 + 8*beta**2*pi**2*r**2*rO*u0**2*math.cos((1/2)*alpha*theta)**2*math.cos(beta*pi \
        *(r - rI)/(rI - rO))**2 - 8*beta**2*pi**2*r*rI**2*math.cos((1/2)*alpha*theta) + 8*beta**2*pi**2 \
        *r*rI*rO*math.cos((1/2)*alpha*theta))*math.cos(theta)/(8*beta**2*pi**2*r**3*rI - 8*beta**2*pi* \
        *2*r**3*rO)
    res[1] = (4*alpha**2*beta*nu*pi*r*rI**2*u0*math.cos((1/2)*alpha*theta)*math.cos(beta*pi*(r - rI) \
        /(rI - rO)) - 8*alpha**2*beta*nu*pi*r*rI*rO*u0*math.cos((1/2)*alpha*theta)*math.cos(beta*pi*(r \
        - rI)/(rI - rO)) + 4*alpha**2*beta*nu*pi*r*rO**2*u0*math.cos((1/2)*alpha*theta)*math.cos(beta \
        *pi*(r - rI)/(rI - rO)) - 8*alpha**2*nu*rI**3*u0*math.sin(beta*pi*(r - rI)/(rI - rO)) \
        *math.cos((1/2)*alpha*theta) + 24*alpha**2*nu*rI**2*rO*u0*math.sin(beta*pi*(r - rI)/(rI - rO)) \
        *math.cos((1/2)*alpha*theta) - 24*alpha**2*nu*rI*rO**2*u0*math.sin(beta*pi*(r - rI)/(rI - rO)) \
        *math.cos((1/2)*alpha*theta) + 8*alpha**2*nu*rO**3*u0*math.sin(beta*pi*(r - rI)/(rI - rO)) \
        *math.cos((1/2)*alpha*theta) - 4*alpha*beta*pi*r**2*rI**2*u0**2*math.sin(alpha*theta) + 8*alpha \
        *beta*pi*r**2*rI*rO*u0**2*math.sin(alpha*theta) - 4*alpha*beta*pi*r**2*rO**2*u0**2 \
        *math.sin(alpha*theta) - 8*alpha*beta*pi*r*rI**3*math.sin((1/2)*alpha*theta) + 16*alpha*beta*pi \
        *r*rI**2*rO*math.sin((1/2)*alpha*theta) - 8*alpha*beta*pi*r*rI*rO**2*math.sin((1/2)*alpha \
        *theta) + alpha*r*rI**3*u0**2*math.cos(alpha*theta - 2*beta*pi*r/(rI - rO) + 2*beta*pi*rI/(rI \
        - rO)) - alpha*r*rI**3*u0**2*math.cos(alpha*theta + 2*beta*pi*r/(rI - rO) - 2*beta*pi*rI/(rI \
        - rO)) - 3*alpha*r*rI**2*rO*u0**2*math.cos(alpha*theta - 2*beta*pi*r/(rI - rO) + 2*beta*pi*rI \
        /(rI - rO)) + 3*alpha*r*rI**2*rO*u0**2*math.cos(alpha*theta + 2*beta*pi*r/(rI - rO) - 2*beta*pi \
        *rI/(rI - rO)) + 3*alpha*r*rI*rO**2*u0**2*math.cos(alpha*theta - 2*beta*pi*r/(rI - rO) + 2*beta \
        *pi*rI/(rI - rO)) - 3*alpha*r*rI*rO**2*u0**2*math.cos(alpha*theta + 2*beta*pi*r/(rI - rO) - 2 \
        *beta*pi*rI/(rI - rO)) - alpha*r*rO**3*u0**2*math.cos(alpha*theta - 2*beta*pi*r/(rI - rO) + 2 \
        *beta*pi*rI/(rI - rO)) + alpha*r*rO**3*u0**2*math.cos(alpha*theta + 2*beta*pi*r/(rI - rO) - 2 \
        *beta*pi*rI/(rI - rO)) + 16*beta**3*nu*pi**3*r**3*u0*math.cos((1/2)*alpha*theta)*math.cos(beta \
        *pi*(r - rI)/(rI - rO)) + 16*beta**2*nu*pi**2*r**2*rI*u0*math.sin(beta*pi*(r - rI)/(rI - rO)) \
        *math.cos((1/2)*alpha*theta) - 16*beta**2*nu*pi**2*r**2*rO*u0*math.sin(beta*pi*(r - rI)/(rI \
        - rO))*math.cos((1/2)*alpha*theta) + 16*beta*nu*pi*r*rI**2*u0*math.cos((1/2)*alpha*theta) \
        *math.cos(beta*pi*(r - rI)/(rI - rO)) - 32*beta*nu*pi*r*rI*rO*u0*math.cos((1/2)*alpha*theta) \
        *math.cos(beta*pi*(r - rI)/(rI - rO)) + 16*beta*nu*pi*r*rO**2*u0*math.cos((1/2)*alpha*theta) \
        *math.cos(beta*pi*(r - rI)/(rI - rO)))*math.cos(theta)/(16*beta*pi*r**3*rI**2 - 32*beta*pi*r**3 \
        *rI*rO + 16*beta*pi*r**3*rO**2) + (alpha**3*beta*nu*pi*rI**2*u0*math.sin((1/2)*alpha*theta) \
        *math.sin(beta*pi*(r - rI)/(rI - rO)) - 2*alpha**3*beta*nu*pi*rI*rO*u0*math.sin((1/2)*alpha \
        *theta)*math.sin(beta*pi*(r - rI)/(rI - rO)) + alpha**3*beta*nu*pi*rO**2*u0*math.sin((1/2) \
        *alpha*theta)*math.sin(beta*pi*(r - rI)/(rI - rO)) + 2*alpha**2*beta*pi*r*rI**2*u0**2 \
        *math.sin((1/2)*alpha*theta)**2*math.sin(beta*pi*(r - rI)/(rI - rO))*math.cos(beta*pi*(r - rI) \
        /(rI - rO)) + 2*alpha**2*beta*pi*r*rI**2*u0**2*math.sin(beta*pi*(r - rI)/(rI - rO))*math.cos((1 \
        /2)*alpha*theta)**2*math.cos(beta*pi*(r - rI)/(rI - rO)) - 4*alpha**2*beta*pi*r*rI*rO*u0**2 \
        *math.sin((1/2)*alpha*theta)**2*math.sin(beta*pi*(r - rI)/(rI - rO))*math.cos(beta*pi*(r - rI) \
        /(rI - rO)) - 4*alpha**2*beta*pi*r*rI*rO*u0**2*math.sin(beta*pi*(r - rI)/(rI - rO))*math.cos((1 \
        /2)*alpha*theta)**2*math.cos(beta*pi*(r - rI)/(rI - rO)) + 2*alpha**2*beta*pi*r*rO**2*u0**2 \
        *math.sin((1/2)*alpha*theta)**2*math.sin(beta*pi*(r - rI)/(rI - rO))*math.cos(beta*pi*(r - rI) \
        /(rI - rO)) + 2*alpha**2*beta*pi*r*rO**2*u0**2*math.sin(beta*pi*(r - rI)/(rI - rO))*math.cos((1 \
        /2)*alpha*theta)**2*math.cos(beta*pi*(r - rI)/(rI - rO)) - 2*alpha**2*rI**3*u0**2*math.sin((1 \
        /2)*alpha*theta)**2*math.sin(beta*pi*(r - rI)/(rI - rO))**2 + 6*alpha**2*rI**2*rO*u0**2 \
        *math.sin((1/2)*alpha*theta)**2*math.sin(beta*pi*(r - rI)/(rI - rO))**2 - 6*alpha**2*rI*rO**2 \
        *u0**2*math.sin((1/2)*alpha*theta)**2*math.sin(beta*pi*(r - rI)/(rI - rO))**2 + 2*alpha**2*rO* \
        *3*u0**2*math.sin((1/2)*alpha*theta)**2*math.sin(beta*pi*(r - rI)/(rI - rO))**2 + 4*alpha*beta* \
        *3*nu*pi**3*r**2*u0*math.sin((1/2)*alpha*theta)*math.sin(beta*pi*(r - rI)/(rI - rO)) - 4*alpha \
        *beta**2*nu*pi**2*r*rI*u0*math.sin((1/2)*alpha*theta)*math.cos(beta*pi*(r - rI)/(rI - rO)) + 4 \
        *alpha*beta**2*nu*pi**2*r*rO*u0*math.sin((1/2)*alpha*theta)*math.cos(beta*pi*(r - rI)/(rI \
        - rO)) - 8*beta**2*pi**2*r**2*rI*u0**2*math.cos((1/2)*alpha*theta)**2*math.cos(beta*pi*(r - rI) \
        /(rI - rO))**2 + 8*beta**2*pi**2*r**2*rO*u0**2*math.cos((1/2)*alpha*theta)**2*math.cos(beta*pi \
        *(r - rI)/(rI - rO))**2 - 8*beta**2*pi**2*r*rI**2*math.cos((1/2)*alpha*theta) + 8*beta**2*pi**2 \
        *r*rI*rO*math.cos((1/2)*alpha*theta))*math.sin(theta)/(8*beta**2*pi**2*r**3*rI - 8*beta**2*pi* \
        *2*r**3*rO)
    return res

# Function g
def g(x, y):
    res = 0
    return res
