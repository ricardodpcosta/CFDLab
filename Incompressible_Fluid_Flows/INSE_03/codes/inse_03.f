! Auto-generated by generate_code.py

module INSE_03

implicit none

! Global constants
real(8), parameter :: rO = 1.0
real(8), parameter :: rI = 0.5
real(8), parameter :: nu = 1.0
real(8), parameter :: rho = 1.0
real(8), parameter :: u0 = 1.0
real(8), parameter :: alpha = 4.0
real(8), parameter :: beta = 1.0
real(8), parameter :: pi = 3.141592653589793

contains

! Function p
function p(x, y) result(res)
    real(8), intent(in) :: x
    real(8), intent(in) :: y
    real(8) :: res
    real(8) :: r
    real(8) :: theta
    r = sqrt(x**2 + y**2)
    theta = atan2(y, x)
    res = rI*rho*cos(0.5d0*alpha*theta)/r
end function p

! Subroutine u
subroutine u(x, y, res)
    real(8), intent(in) :: x
    real(8), intent(in) :: y
    real(8), intent(out) :: res(2)
    real(8) :: r
    real(8) :: theta
    r = sqrt(x**2 + y**2)
    theta = atan2(y, x)
    res(1) = (1.0d0/2.0d0)*alpha*u0*(-rI + rO)*sin(0.5d0*alpha*theta)*sin(beta*pi*(r - rI)/(-rI + rO)) &
        *cos(theta)/(beta*pi*r) - u0*sin(theta)*cos( 0.5d0*alpha*theta)*cos(beta*pi*(r - rI)/(-rI + rO))
    res(2) = (1.0d0/2.0d0)*alpha*u0*(-rI + rO)*sin(theta)*sin(0.5d0*alpha*theta)*sin( beta*pi*(r - rI) &
        /(-rI + rO))/(beta*pi*r) + u0*cos(theta)*cos( 0.5d0*alpha*theta)*cos(beta*pi*(r - rI)/(-rI &
        + rO))
end subroutine u

! Subroutine f
subroutine f(x, y, res)
    real(8), intent(in) :: x
    real(8), intent(in) :: y
    real(8), intent(out) :: res(2)
    real(8) :: r
    real(8) :: theta
    r = sqrt(x**2 + y**2)
    theta = atan2(y, x)
    res(1) = -(4*alpha**2*beta*nu*pi*r*rI**2*u0*cos(0.5d0*alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)) &
        - 8*alpha**2*beta*nu*pi*r*rI*rO*u0*cos(0.5d0* alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)) + 4 &
        *alpha**2*beta*nu *pi*r*rO**2*u0*cos(0.5d0*alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)) - 8 &
        *alpha**2*nu*rI**3*u0*sin(beta*pi*(r - rI)/(rI - rO))*cos (0.5d0*alpha*theta) + 24*alpha**2*nu &
        *rI**2*rO*u0*sin(beta*pi*(r - rI)/(rI - rO))*cos(0.5d0*alpha*theta) - 24*alpha**2*nu*rI*rO**2 &
        * u0*sin(beta*pi*(r - rI)/(rI - rO))*cos(0.5d0*alpha*theta) + 8* alpha**2*nu*rO**3*u0*sin(beta &
        *pi*(r - rI)/(rI - rO))*cos(0.5d0* alpha*theta) - 4*alpha*beta*pi*r**2*rI**2*u0**2*sin(alpha &
        *theta) + 8*alpha*beta*pi*r**2*rI*rO*u0**2*sin(alpha*theta) - 4*alpha* beta*pi*r**2*rO**2*u0**2 &
        *sin(alpha*theta) - 8*alpha*beta*pi*r*rI **3*sin(0.5d0*alpha*theta) + 16*alpha*beta*pi*r*rI**2 &
        *rO*sin( 0.5d0*alpha*theta) - 8*alpha*beta*pi*r*rI*rO**2*sin(0.5d0*alpha* theta) + alpha*r*rI* &
        *3*u0**2*cos(alpha*theta - 2.0d0*beta*pi*r/( rI - rO) + 2.0d0*beta*pi*rI/(rI - rO)) - alpha*r &
        *rI**3*u0**2*cos( alpha*theta + 2.0d0*beta*pi*r/(rI - rO) - 2.0d0*beta*pi*rI/(rI - rO)) - 3 &
        *alpha*r*rI**2*rO*u0**2*cos(alpha*theta - 2.0d0*beta*pi*r /(rI - rO) + 2.0d0*beta*pi*rI/(rI &
        - rO)) + 3*alpha*r*rI**2*rO*u0 **2*cos(alpha*theta + 2.0d0*beta*pi*r/(rI - rO) - 2.0d0*beta*pi &
        * rI/(rI - rO)) + 3*alpha*r*rI*rO**2*u0**2*cos(alpha*theta - 2.0d0* beta*pi*r/(rI - rO) + 2.0d0 &
        *beta*pi*rI/(rI - rO)) - 3*alpha*r*rI* rO**2*u0**2*cos(alpha*theta + 2.0d0*beta*pi*r/(rI - rO) &
        - 2.0d0* beta*pi*rI/(rI - rO)) - alpha*r*rO**3*u0**2*cos(alpha*theta - 2.0d0*beta*pi*r/(rI &
        - rO) + 2.0d0*beta*pi*rI/(rI - rO)) + alpha*r *rO**3*u0**2*cos(alpha*theta + 2.0d0*beta*pi*r &
        /(rI - rO) - 2.0d0* beta*pi*rI/(rI - rO)) + 16*beta**3*nu*pi**3*r**3*u0*cos(0.5d0* alpha*theta) &
        *cos(beta*pi*(r - rI)/(rI - rO)) + 16*beta**2*nu*pi** 2*r**2*rI*u0*sin(beta*pi*(r - rI)/(rI &
        - rO))*cos(0.5d0*alpha* theta) - 16*beta**2*nu*pi**2*r**2*rO*u0*sin(beta*pi*(r - rI)/(rI - rO)) &
        *cos(0.5d0*alpha*theta) + 16*beta*nu*pi*r*rI**2*u0*cos( 0.5d0*alpha*theta)*cos(beta*pi*(r - rI) &
        /(rI - rO)) - 32*beta*nu* pi*r*rI*rO*u0*cos(0.5d0*alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)) &
        + 16*beta*nu*pi*r*rO**2*u0*cos(0.5d0*alpha*theta)*cos(beta* pi*(r - rI)/(rI - rO)))*sin(theta) &
        /(16*beta*pi*r**3*rI**2 - 32* beta*pi*r**3*rI*rO + 16*beta*pi*r**3*rO**2) + (alpha**3*beta*nu &
        * pi*rI**2*u0*sin(0.5d0*alpha*theta)*sin(beta*pi*(r - rI)/(rI - rO )) - 2*alpha**3*beta*nu*pi &
        *rI*rO*u0*sin(0.5d0*alpha*theta)*sin( beta*pi*(r - rI)/(rI - rO)) + alpha**3*beta*nu*pi*rO**2 &
        *u0*sin( 0.5d0*alpha*theta)*sin(beta*pi*(r - rI)/(rI - rO)) + 2*alpha**2* beta*pi*r*rI**2*u0**2 &
        *sin(0.5d0*alpha*theta)**2*sin(beta*pi*(r - rI)/(rI - rO))*cos(beta*pi*(r - rI)/(rI - rO)) + 2 &
        *alpha**2*beta* pi*r*rI**2*u0**2*sin(beta*pi*(r - rI)/(rI - rO))*cos(0.5d0*alpha* theta)**2 &
        *cos(beta*pi*(r - rI)/(rI - rO)) - 4*alpha**2*beta*pi*r* rI*rO*u0**2*sin(0.5d0*alpha*theta)**2 &
        *sin(beta*pi*(r - rI)/(rI - rO))*cos(beta*pi*(r - rI)/(rI - rO)) - 4*alpha**2*beta*pi*r*rI*rO &
        *u0**2*sin(beta*pi*(r - rI)/(rI - rO))*cos(0.5d0*alpha*theta)**2* cos(beta*pi*(r - rI)/(rI &
        - rO)) + 2*alpha**2*beta*pi*r*rO**2*u0** 2*sin(0.5d0*alpha*theta)**2*sin(beta*pi*(r - rI)/(rI &
        - rO))*cos( beta*pi*(r - rI)/(rI - rO)) + 2*alpha**2*beta*pi*r*rO**2*u0**2* sin(beta*pi*(r &
        - rI)/(rI - rO))*cos(0.5d0*alpha*theta)**2*cos( beta*pi*(r - rI)/(rI - rO)) - 2*alpha**2*rI**3 &
        *u0**2*sin(0.5d0* alpha*theta)**2*sin(beta*pi*(r - rI)/(rI - rO))**2 + 6*alpha**2* rI**2*rO*u0* &
        *2*sin(0.5d0*alpha*theta)**2*sin(beta*pi*(r - rI)/(rI - rO))**2 - 6*alpha**2*rI*rO**2*u0**2 &
        *sin(0.5d0*alpha*theta)**2* sin(beta*pi*(r - rI)/(rI - rO))**2 + 2*alpha**2*rO**3*u0**2 &
        *sin( 0.5d0*alpha*theta)**2*sin(beta*pi*(r - rI)/(rI - rO))**2 + 4* alpha*beta**3*nu*pi**3*r**2 &
        *u0*sin(0.5d0*alpha*theta)*sin(beta*pi *(r - rI)/(rI - rO)) - 4*alpha*beta**2*nu*pi**2*r*rI*u0 &
        *sin(0.5d0 *alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)) + 4*alpha*beta**2* nu*pi**2*r*rO*u0 &
        *sin(0.5d0*alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)) - 8*beta**2*pi**2*r**2*rI*u0**2 &
        *cos(0.5d0*alpha*theta)**2* cos(beta*pi*(r - rI)/(rI - rO))**2 + 8*beta**2*pi**2*r**2*rO*u0** 2 &
        *cos(0.5d0*alpha*theta)**2*cos(beta*pi*(r - rI)/(rI - rO))**2 - 8*beta**2*pi**2*r*rI**2 &
        *cos(0.5d0*alpha*theta) + 8*beta**2*pi**2* r*rI*rO*cos(0.5d0*alpha*theta))*cos(theta)/(8*beta* &
        *2*pi**2*r**3* rI - 8*beta**2*pi**2*r**3*rO)
    res(2) = (4*alpha**2*beta*nu*pi*r*rI**2*u0*cos(0.5d0*alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)) &
        - 8*alpha**2*beta*nu*pi*r*rI*rO*u0*cos(0.5d0* alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)) + 4 &
        *alpha**2*beta*nu *pi*r*rO**2*u0*cos(0.5d0*alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)) - 8 &
        *alpha**2*nu*rI**3*u0*sin(beta*pi*(r - rI)/(rI - rO))*cos (0.5d0*alpha*theta) + 24*alpha**2*nu &
        *rI**2*rO*u0*sin(beta*pi*(r - rI)/(rI - rO))*cos(0.5d0*alpha*theta) - 24*alpha**2*nu*rI*rO**2 &
        * u0*sin(beta*pi*(r - rI)/(rI - rO))*cos(0.5d0*alpha*theta) + 8* alpha**2*nu*rO**3*u0*sin(beta &
        *pi*(r - rI)/(rI - rO))*cos(0.5d0* alpha*theta) - 4*alpha*beta*pi*r**2*rI**2*u0**2*sin(alpha &
        *theta) + 8*alpha*beta*pi*r**2*rI*rO*u0**2*sin(alpha*theta) - 4*alpha* beta*pi*r**2*rO**2*u0**2 &
        *sin(alpha*theta) - 8*alpha*beta*pi*r*rI **3*sin(0.5d0*alpha*theta) + 16*alpha*beta*pi*r*rI**2 &
        *rO*sin( 0.5d0*alpha*theta) - 8*alpha*beta*pi*r*rI*rO**2*sin(0.5d0*alpha* theta) + alpha*r*rI* &
        *3*u0**2*cos(alpha*theta - 2.0d0*beta*pi*r/( rI - rO) + 2.0d0*beta*pi*rI/(rI - rO)) - alpha*r &
        *rI**3*u0**2*cos( alpha*theta + 2.0d0*beta*pi*r/(rI - rO) - 2.0d0*beta*pi*rI/(rI - rO)) - 3 &
        *alpha*r*rI**2*rO*u0**2*cos(alpha*theta - 2.0d0*beta*pi*r /(rI - rO) + 2.0d0*beta*pi*rI/(rI &
        - rO)) + 3*alpha*r*rI**2*rO*u0 **2*cos(alpha*theta + 2.0d0*beta*pi*r/(rI - rO) - 2.0d0*beta*pi &
        * rI/(rI - rO)) + 3*alpha*r*rI*rO**2*u0**2*cos(alpha*theta - 2.0d0* beta*pi*r/(rI - rO) + 2.0d0 &
        *beta*pi*rI/(rI - rO)) - 3*alpha*r*rI* rO**2*u0**2*cos(alpha*theta + 2.0d0*beta*pi*r/(rI - rO) &
        - 2.0d0* beta*pi*rI/(rI - rO)) - alpha*r*rO**3*u0**2*cos(alpha*theta - 2.0d0*beta*pi*r/(rI &
        - rO) + 2.0d0*beta*pi*rI/(rI - rO)) + alpha*r *rO**3*u0**2*cos(alpha*theta + 2.0d0*beta*pi*r &
        /(rI - rO) - 2.0d0* beta*pi*rI/(rI - rO)) + 16*beta**3*nu*pi**3*r**3*u0*cos(0.5d0* alpha*theta) &
        *cos(beta*pi*(r - rI)/(rI - rO)) + 16*beta**2*nu*pi** 2*r**2*rI*u0*sin(beta*pi*(r - rI)/(rI &
        - rO))*cos(0.5d0*alpha* theta) - 16*beta**2*nu*pi**2*r**2*rO*u0*sin(beta*pi*(r - rI)/(rI - rO)) &
        *cos(0.5d0*alpha*theta) + 16*beta*nu*pi*r*rI**2*u0*cos( 0.5d0*alpha*theta)*cos(beta*pi*(r - rI) &
        /(rI - rO)) - 32*beta*nu* pi*r*rI*rO*u0*cos(0.5d0*alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)) &
        + 16*beta*nu*pi*r*rO**2*u0*cos(0.5d0*alpha*theta)*cos(beta* pi*(r - rI)/(rI - rO)))*cos(theta) &
        /(16*beta*pi*r**3*rI**2 - 32* beta*pi*r**3*rI*rO + 16*beta*pi*r**3*rO**2) + (alpha**3*beta*nu &
        * pi*rI**2*u0*sin(0.5d0*alpha*theta)*sin(beta*pi*(r - rI)/(rI - rO )) - 2*alpha**3*beta*nu*pi &
        *rI*rO*u0*sin(0.5d0*alpha*theta)*sin( beta*pi*(r - rI)/(rI - rO)) + alpha**3*beta*nu*pi*rO**2 &
        *u0*sin( 0.5d0*alpha*theta)*sin(beta*pi*(r - rI)/(rI - rO)) + 2*alpha**2* beta*pi*r*rI**2*u0**2 &
        *sin(0.5d0*alpha*theta)**2*sin(beta*pi*(r - rI)/(rI - rO))*cos(beta*pi*(r - rI)/(rI - rO)) + 2 &
        *alpha**2*beta* pi*r*rI**2*u0**2*sin(beta*pi*(r - rI)/(rI - rO))*cos(0.5d0*alpha* theta)**2 &
        *cos(beta*pi*(r - rI)/(rI - rO)) - 4*alpha**2*beta*pi*r* rI*rO*u0**2*sin(0.5d0*alpha*theta)**2 &
        *sin(beta*pi*(r - rI)/(rI - rO))*cos(beta*pi*(r - rI)/(rI - rO)) - 4*alpha**2*beta*pi*r*rI*rO &
        *u0**2*sin(beta*pi*(r - rI)/(rI - rO))*cos(0.5d0*alpha*theta)**2* cos(beta*pi*(r - rI)/(rI &
        - rO)) + 2*alpha**2*beta*pi*r*rO**2*u0** 2*sin(0.5d0*alpha*theta)**2*sin(beta*pi*(r - rI)/(rI &
        - rO))*cos( beta*pi*(r - rI)/(rI - rO)) + 2*alpha**2*beta*pi*r*rO**2*u0**2* sin(beta*pi*(r &
        - rI)/(rI - rO))*cos(0.5d0*alpha*theta)**2*cos( beta*pi*(r - rI)/(rI - rO)) - 2*alpha**2*rI**3 &
        *u0**2*sin(0.5d0* alpha*theta)**2*sin(beta*pi*(r - rI)/(rI - rO))**2 + 6*alpha**2* rI**2*rO*u0* &
        *2*sin(0.5d0*alpha*theta)**2*sin(beta*pi*(r - rI)/(rI - rO))**2 - 6*alpha**2*rI*rO**2*u0**2 &
        *sin(0.5d0*alpha*theta)**2* sin(beta*pi*(r - rI)/(rI - rO))**2 + 2*alpha**2*rO**3*u0**2 &
        *sin( 0.5d0*alpha*theta)**2*sin(beta*pi*(r - rI)/(rI - rO))**2 + 4* alpha*beta**3*nu*pi**3*r**2 &
        *u0*sin(0.5d0*alpha*theta)*sin(beta*pi *(r - rI)/(rI - rO)) - 4*alpha*beta**2*nu*pi**2*r*rI*u0 &
        *sin(0.5d0 *alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)) + 4*alpha*beta**2* nu*pi**2*r*rO*u0 &
        *sin(0.5d0*alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)) - 8*beta**2*pi**2*r**2*rI*u0**2 &
        *cos(0.5d0*alpha*theta)**2* cos(beta*pi*(r - rI)/(rI - rO))**2 + 8*beta**2*pi**2*r**2*rO*u0** 2 &
        *cos(0.5d0*alpha*theta)**2*cos(beta*pi*(r - rI)/(rI - rO))**2 - 8*beta**2*pi**2*r*rI**2 &
        *cos(0.5d0*alpha*theta) + 8*beta**2*pi**2* r*rI*rO*cos(0.5d0*alpha*theta))*sin(theta)/(8*beta* &
        *2*pi**2*r**3* rI - 8*beta**2*pi**2*r**3*rO)
end subroutine f

! Function g
function g(x, y) result(res)
    real(8), intent(in) :: x
    real(8), intent(in) :: y
    real(8) :: res
    real(8) :: r
    real(8) :: theta
    r = sqrt(x**2 + y**2)
    theta = atan2(y, x)
    res = 0
end function g

end module inse_03
