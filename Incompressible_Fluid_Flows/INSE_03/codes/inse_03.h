// Auto-generated by generate_code.py

#ifndef INSE_03_H

#define INSE_03_H

#include <cmath>

// Global constants
double rO = 1.0;
double rI = 0.5;
double nu = 1.0;
double rho = 1.0;
double u0 = 1.0;
double alpha = 4.0;
double beta = 1.0;
double pi = 3.141592653589793;

// Function p
inline double p(double x, double y) {
    double r = sqrt(pow(x, 2) + pow(y, 2));
    double theta = atan2(y, x);
    double res = rI*rho*cos((1.0/2.0)*alpha*theta)/r;
    return res;
}

// Function u
inline void u(double x, double y, double res[2]) {
    double r = sqrt(pow(x, 2) + pow(y, 2));
    double theta = atan2(y, x);
    res[0] = (1.0/2.0)*alpha*u0*(-rI + rO)*sin((1.0/2.0)*alpha*theta)*sin(beta*pi*(r - rI)/(-rI + rO)) \
        *cos(theta)/(beta*pi*r) - u0*sin(theta)*cos((1.0/2.0)*alpha*theta)*cos(beta*pi*(r - rI)/(-rI \
        + rO));
    res[1] = (1.0/2.0)*alpha*u0*(-rI + rO)*sin(theta)*sin((1.0/2.0)*alpha*theta)*sin(beta*pi*(r - rI)/( \
        -rI + rO))/(beta*pi*r) + u0*cos(theta)*cos((1.0/2.0)*alpha*theta)*cos(beta*pi*(r - rI)/(-rI \
        + rO));
}

// Function f
inline void f(double x, double y, double res[2]) {
    double r = sqrt(pow(x, 2) + pow(y, 2));
    double theta = atan2(y, x);
    res[0] = -(4*pow(alpha, 2)*beta*nu*pi*r*pow(rI, 2)*u0*cos((1.0/2.0)*alpha*theta)*cos(beta*pi*(r \
        - rI)/(rI - rO)) - 8*pow(alpha, 2)*beta*nu*pi*r*rI*rO*u0*cos((1.0/2.0)*alpha*theta)*cos(beta*pi \
        *(r - rI)/(rI - rO)) + 4*pow(alpha, 2)*beta*nu*pi*r*pow(rO, 2)*u0*cos((1.0/2.0)*alpha*theta) \
        *cos(beta*pi*(r - rI)/(rI - rO)) - 8*pow(alpha, 2)*nu*pow(rI, 3)*u0*sin(beta*pi*(r - rI)/(rI \
        - rO))*cos((1.0/2.0)*alpha*theta) + 24*pow(alpha, 2)*nu*pow(rI, 2)*rO*u0*sin(beta*pi*(r - rI) \
        /(rI - rO))*cos((1.0/2.0)*alpha*theta) - 24*pow(alpha, 2)*nu*rI*pow(rO, 2)*u0*sin(beta*pi*(r \
        - rI)/(rI - rO))*cos((1.0/2.0)*alpha*theta) + 8*pow(alpha, 2)*nu*pow(rO, 3)*u0*sin(beta*pi*(r \
        - rI)/(rI - rO))*cos((1.0/2.0)*alpha*theta) - 4*alpha*beta*pi*pow(r, 2)*pow(rI, 2)*pow(u0, 2) \
        *sin(alpha*theta) + 8*alpha*beta*pi*pow(r, 2)*rI*rO*pow(u0, 2)*sin(alpha*theta) - 4*alpha*beta \
        *pi*pow(r, 2)*pow(rO, 2)*pow(u0, 2)*sin(alpha*theta) - 8*alpha*beta*pi*r*pow(rI, 3)*sin((1.0 \
        /2.0)*alpha*theta) + 16*alpha*beta*pi*r*pow(rI, 2)*rO*sin((1.0/2.0)*alpha*theta) - 8*alpha*beta \
        *pi*r*rI*pow(rO, 2)*sin((1.0/2.0)*alpha*theta) + alpha*r*pow(rI, 3)*pow(u0, 2)*cos(alpha*theta \
        - 2*beta*pi*r/(rI - rO) + 2*beta*pi*rI/(rI - rO)) - alpha*r*pow(rI, 3)*pow(u0, 2)*cos(alpha \
        *theta + 2*beta*pi*r/(rI - rO) - 2*beta*pi*rI/(rI - rO)) - 3*alpha*r*pow(rI, 2)*rO*pow(u0, 2) \
        *cos(alpha*theta - 2*beta*pi*r/(rI - rO) + 2*beta*pi*rI/(rI - rO)) + 3*alpha*r*pow(rI, 2)*rO \
        *pow(u0, 2)*cos(alpha*theta + 2*beta*pi*r/(rI - rO) - 2*beta*pi*rI/(rI - rO)) + 3*alpha*r*rI \
        *pow(rO, 2)*pow(u0, 2)*cos(alpha*theta - 2*beta*pi*r/(rI - rO) + 2*beta*pi*rI/(rI - rO)) - 3 \
        *alpha*r*rI*pow(rO, 2)*pow(u0, 2)*cos(alpha*theta + 2*beta*pi*r/(rI - rO) - 2*beta*pi*rI/(rI \
        - rO)) - alpha*r*pow(rO, 3)*pow(u0, 2)*cos(alpha*theta - 2*beta*pi*r/(rI - rO) + 2*beta*pi*rI \
        /(rI - rO)) + alpha*r*pow(rO, 3)*pow(u0, 2)*cos(alpha*theta + 2*beta*pi*r/(rI - rO) - 2*beta*pi \
        *rI/(rI - rO)) + 16*pow(beta, 3)*nu*pow(pi, 3)*pow(r, 3)*u0*cos((1.0/2.0)*alpha*theta)*cos(beta \
        *pi*(r - rI)/(rI - rO)) + 16*pow(beta, 2)*nu*pow(pi, 2)*pow(r, 2)*rI*u0*sin(beta*pi*(r - rI) \
        /(rI - rO))*cos((1.0/2.0)*alpha*theta) - 16*pow(beta, 2)*nu*pow(pi, 2)*pow(r, 2)*rO*u0*sin(beta \
        *pi*(r - rI)/(rI - rO))*cos((1.0/2.0)*alpha*theta) + 16*beta*nu*pi*r*pow(rI, 2)*u0*cos((1.0 \
        /2.0)*alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)) - 32*beta*nu*pi*r*rI*rO*u0*cos((1.0/2.0) \
        *alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)) + 16*beta*nu*pi*r*pow(rO, 2)*u0*cos((1.0/2.0) \
        *alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)))*sin(theta)/(16*beta*pi*pow(r, 3)*pow(rI, 2) - 32 \
        *beta*pi*pow(r, 3)*rI*rO + 16*beta*pi*pow(r, 3)*pow(rO, 2)) + (pow(alpha, 3)*beta*nu*pi \
        *pow(rI, 2)*u0*sin((1.0/2.0)*alpha*theta)*sin(beta*pi*(r - rI)/(rI - rO)) - 2*pow(alpha, 3) \
        *beta*nu*pi*rI*rO*u0*sin((1.0/2.0)*alpha*theta)*sin(beta*pi*(r - rI)/(rI - rO)) + pow(alpha, 3) \
        *beta*nu*pi*pow(rO, 2)*u0*sin((1.0/2.0)*alpha*theta)*sin(beta*pi*(r - rI)/(rI - rO)) + 2 \
        *pow(alpha, 2)*beta*pi*r*pow(rI, 2)*pow(u0, 2)*pow(sin((1.0/2.0)*alpha*theta), 2)*sin(beta*pi \
        *(r - rI)/(rI - rO))*cos(beta*pi*(r - rI)/(rI - rO)) + 2*pow(alpha, 2)*beta*pi*r*pow(rI, 2) \
        *pow(u0, 2)*sin(beta*pi*(r - rI)/(rI - rO))*pow(cos((1.0/2.0)*alpha*theta), 2)*cos(beta*pi*(r \
        - rI)/(rI - rO)) - 4*pow(alpha, 2)*beta*pi*r*rI*rO*pow(u0, 2)*pow(sin((1.0/2.0)*alpha \
        *theta), 2)*sin(beta*pi*(r - rI)/(rI - rO))*cos(beta*pi*(r - rI)/(rI - rO)) - 4*pow(alpha, 2) \
        *beta*pi*r*rI*rO*pow(u0, 2)*sin(beta*pi*(r - rI)/(rI - rO))*pow(cos((1.0/2.0)*alpha*theta), 2) \
        *cos(beta*pi*(r - rI)/(rI - rO)) + 2*pow(alpha, 2)*beta*pi*r*pow(rO, 2)*pow(u0, 2)*pow(sin((1.0 \
        /2.0)*alpha*theta), 2)*sin(beta*pi*(r - rI)/(rI - rO))*cos(beta*pi*(r - rI)/(rI - rO)) + 2 \
        *pow(alpha, 2)*beta*pi*r*pow(rO, 2)*pow(u0, 2)*sin(beta*pi*(r - rI)/(rI - rO))*pow(cos((1.0 \
        /2.0)*alpha*theta), 2)*cos(beta*pi*(r - rI)/(rI - rO)) - 2*pow(alpha, 2)*pow(rI, 3)*pow(u0, 2) \
        *pow(sin((1.0/2.0)*alpha*theta), 2)*pow(sin(beta*pi*(r - rI)/(rI - rO)), 2) + 6*pow(alpha, 2) \
        *pow(rI, 2)*rO*pow(u0, 2)*pow(sin((1.0/2.0)*alpha*theta), 2)*pow(sin(beta*pi*(r - rI)/(rI \
        - rO)), 2) - 6*pow(alpha, 2)*rI*pow(rO, 2)*pow(u0, 2)*pow(sin((1.0/2.0)*alpha*theta), 2) \
        *pow(sin(beta*pi*(r - rI)/(rI - rO)), 2) + 2*pow(alpha, 2)*pow(rO, 3)*pow(u0, 2)*pow(sin((1.0 \
        /2.0)*alpha*theta), 2)*pow(sin(beta*pi*(r - rI)/(rI - rO)), 2) + 4*alpha*pow(beta, 3)*nu \
        *pow(pi, 3)*pow(r, 2)*u0*sin((1.0/2.0)*alpha*theta)*sin(beta*pi*(r - rI)/(rI - rO)) - 4*alpha \
        *pow(beta, 2)*nu*pow(pi, 2)*r*rI*u0*sin((1.0/2.0)*alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)) \
        + 4*alpha*pow(beta, 2)*nu*pow(pi, 2)*r*rO*u0*sin((1.0/2.0)*alpha*theta)*cos(beta*pi*(r - rI) \
        /(rI - rO)) - 8*pow(beta, 2)*pow(pi, 2)*pow(r, 2)*rI*pow(u0, 2)*pow(cos((1.0/2.0)*alpha \
        *theta), 2)*pow(cos(beta*pi*(r - rI)/(rI - rO)), 2) + 8*pow(beta, 2)*pow(pi, 2)*pow(r, 2)*rO \
        *pow(u0, 2)*pow(cos((1.0/2.0)*alpha*theta), 2)*pow(cos(beta*pi*(r - rI)/(rI - rO)), 2) - 8 \
        *pow(beta, 2)*pow(pi, 2)*r*pow(rI, 2)*cos((1.0/2.0)*alpha*theta) + 8*pow(beta, 2)*pow(pi, 2)*r \
        *rI*rO*cos((1.0/2.0)*alpha*theta))*cos(theta)/(8*pow(beta, 2)*pow(pi, 2)*pow(r, 3)*rI - 8 \
        *pow(beta, 2)*pow(pi, 2)*pow(r, 3)*rO);
    res[1] = (4*pow(alpha, 2)*beta*nu*pi*r*pow(rI, 2)*u0*cos((1.0/2.0)*alpha*theta)*cos(beta*pi*(r \
        - rI)/(rI - rO)) - 8*pow(alpha, 2)*beta*nu*pi*r*rI*rO*u0*cos((1.0/2.0)*alpha*theta)*cos(beta*pi \
        *(r - rI)/(rI - rO)) + 4*pow(alpha, 2)*beta*nu*pi*r*pow(rO, 2)*u0*cos((1.0/2.0)*alpha*theta) \
        *cos(beta*pi*(r - rI)/(rI - rO)) - 8*pow(alpha, 2)*nu*pow(rI, 3)*u0*sin(beta*pi*(r - rI)/(rI \
        - rO))*cos((1.0/2.0)*alpha*theta) + 24*pow(alpha, 2)*nu*pow(rI, 2)*rO*u0*sin(beta*pi*(r - rI) \
        /(rI - rO))*cos((1.0/2.0)*alpha*theta) - 24*pow(alpha, 2)*nu*rI*pow(rO, 2)*u0*sin(beta*pi*(r \
        - rI)/(rI - rO))*cos((1.0/2.0)*alpha*theta) + 8*pow(alpha, 2)*nu*pow(rO, 3)*u0*sin(beta*pi*(r \
        - rI)/(rI - rO))*cos((1.0/2.0)*alpha*theta) - 4*alpha*beta*pi*pow(r, 2)*pow(rI, 2)*pow(u0, 2) \
        *sin(alpha*theta) + 8*alpha*beta*pi*pow(r, 2)*rI*rO*pow(u0, 2)*sin(alpha*theta) - 4*alpha*beta \
        *pi*pow(r, 2)*pow(rO, 2)*pow(u0, 2)*sin(alpha*theta) - 8*alpha*beta*pi*r*pow(rI, 3)*sin((1.0 \
        /2.0)*alpha*theta) + 16*alpha*beta*pi*r*pow(rI, 2)*rO*sin((1.0/2.0)*alpha*theta) - 8*alpha*beta \
        *pi*r*rI*pow(rO, 2)*sin((1.0/2.0)*alpha*theta) + alpha*r*pow(rI, 3)*pow(u0, 2)*cos(alpha*theta \
        - 2*beta*pi*r/(rI - rO) + 2*beta*pi*rI/(rI - rO)) - alpha*r*pow(rI, 3)*pow(u0, 2)*cos(alpha \
        *theta + 2*beta*pi*r/(rI - rO) - 2*beta*pi*rI/(rI - rO)) - 3*alpha*r*pow(rI, 2)*rO*pow(u0, 2) \
        *cos(alpha*theta - 2*beta*pi*r/(rI - rO) + 2*beta*pi*rI/(rI - rO)) + 3*alpha*r*pow(rI, 2)*rO \
        *pow(u0, 2)*cos(alpha*theta + 2*beta*pi*r/(rI - rO) - 2*beta*pi*rI/(rI - rO)) + 3*alpha*r*rI \
        *pow(rO, 2)*pow(u0, 2)*cos(alpha*theta - 2*beta*pi*r/(rI - rO) + 2*beta*pi*rI/(rI - rO)) - 3 \
        *alpha*r*rI*pow(rO, 2)*pow(u0, 2)*cos(alpha*theta + 2*beta*pi*r/(rI - rO) - 2*beta*pi*rI/(rI \
        - rO)) - alpha*r*pow(rO, 3)*pow(u0, 2)*cos(alpha*theta - 2*beta*pi*r/(rI - rO) + 2*beta*pi*rI \
        /(rI - rO)) + alpha*r*pow(rO, 3)*pow(u0, 2)*cos(alpha*theta + 2*beta*pi*r/(rI - rO) - 2*beta*pi \
        *rI/(rI - rO)) + 16*pow(beta, 3)*nu*pow(pi, 3)*pow(r, 3)*u0*cos((1.0/2.0)*alpha*theta)*cos(beta \
        *pi*(r - rI)/(rI - rO)) + 16*pow(beta, 2)*nu*pow(pi, 2)*pow(r, 2)*rI*u0*sin(beta*pi*(r - rI) \
        /(rI - rO))*cos((1.0/2.0)*alpha*theta) - 16*pow(beta, 2)*nu*pow(pi, 2)*pow(r, 2)*rO*u0*sin(beta \
        *pi*(r - rI)/(rI - rO))*cos((1.0/2.0)*alpha*theta) + 16*beta*nu*pi*r*pow(rI, 2)*u0*cos((1.0 \
        /2.0)*alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)) - 32*beta*nu*pi*r*rI*rO*u0*cos((1.0/2.0) \
        *alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)) + 16*beta*nu*pi*r*pow(rO, 2)*u0*cos((1.0/2.0) \
        *alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)))*cos(theta)/(16*beta*pi*pow(r, 3)*pow(rI, 2) - 32 \
        *beta*pi*pow(r, 3)*rI*rO + 16*beta*pi*pow(r, 3)*pow(rO, 2)) + (pow(alpha, 3)*beta*nu*pi \
        *pow(rI, 2)*u0*sin((1.0/2.0)*alpha*theta)*sin(beta*pi*(r - rI)/(rI - rO)) - 2*pow(alpha, 3) \
        *beta*nu*pi*rI*rO*u0*sin((1.0/2.0)*alpha*theta)*sin(beta*pi*(r - rI)/(rI - rO)) + pow(alpha, 3) \
        *beta*nu*pi*pow(rO, 2)*u0*sin((1.0/2.0)*alpha*theta)*sin(beta*pi*(r - rI)/(rI - rO)) + 2 \
        *pow(alpha, 2)*beta*pi*r*pow(rI, 2)*pow(u0, 2)*pow(sin((1.0/2.0)*alpha*theta), 2)*sin(beta*pi \
        *(r - rI)/(rI - rO))*cos(beta*pi*(r - rI)/(rI - rO)) + 2*pow(alpha, 2)*beta*pi*r*pow(rI, 2) \
        *pow(u0, 2)*sin(beta*pi*(r - rI)/(rI - rO))*pow(cos((1.0/2.0)*alpha*theta), 2)*cos(beta*pi*(r \
        - rI)/(rI - rO)) - 4*pow(alpha, 2)*beta*pi*r*rI*rO*pow(u0, 2)*pow(sin((1.0/2.0)*alpha \
        *theta), 2)*sin(beta*pi*(r - rI)/(rI - rO))*cos(beta*pi*(r - rI)/(rI - rO)) - 4*pow(alpha, 2) \
        *beta*pi*r*rI*rO*pow(u0, 2)*sin(beta*pi*(r - rI)/(rI - rO))*pow(cos((1.0/2.0)*alpha*theta), 2) \
        *cos(beta*pi*(r - rI)/(rI - rO)) + 2*pow(alpha, 2)*beta*pi*r*pow(rO, 2)*pow(u0, 2)*pow(sin((1.0 \
        /2.0)*alpha*theta), 2)*sin(beta*pi*(r - rI)/(rI - rO))*cos(beta*pi*(r - rI)/(rI - rO)) + 2 \
        *pow(alpha, 2)*beta*pi*r*pow(rO, 2)*pow(u0, 2)*sin(beta*pi*(r - rI)/(rI - rO))*pow(cos((1.0 \
        /2.0)*alpha*theta), 2)*cos(beta*pi*(r - rI)/(rI - rO)) - 2*pow(alpha, 2)*pow(rI, 3)*pow(u0, 2) \
        *pow(sin((1.0/2.0)*alpha*theta), 2)*pow(sin(beta*pi*(r - rI)/(rI - rO)), 2) + 6*pow(alpha, 2) \
        *pow(rI, 2)*rO*pow(u0, 2)*pow(sin((1.0/2.0)*alpha*theta), 2)*pow(sin(beta*pi*(r - rI)/(rI \
        - rO)), 2) - 6*pow(alpha, 2)*rI*pow(rO, 2)*pow(u0, 2)*pow(sin((1.0/2.0)*alpha*theta), 2) \
        *pow(sin(beta*pi*(r - rI)/(rI - rO)), 2) + 2*pow(alpha, 2)*pow(rO, 3)*pow(u0, 2)*pow(sin((1.0 \
        /2.0)*alpha*theta), 2)*pow(sin(beta*pi*(r - rI)/(rI - rO)), 2) + 4*alpha*pow(beta, 3)*nu \
        *pow(pi, 3)*pow(r, 2)*u0*sin((1.0/2.0)*alpha*theta)*sin(beta*pi*(r - rI)/(rI - rO)) - 4*alpha \
        *pow(beta, 2)*nu*pow(pi, 2)*r*rI*u0*sin((1.0/2.0)*alpha*theta)*cos(beta*pi*(r - rI)/(rI - rO)) \
        + 4*alpha*pow(beta, 2)*nu*pow(pi, 2)*r*rO*u0*sin((1.0/2.0)*alpha*theta)*cos(beta*pi*(r - rI) \
        /(rI - rO)) - 8*pow(beta, 2)*pow(pi, 2)*pow(r, 2)*rI*pow(u0, 2)*pow(cos((1.0/2.0)*alpha \
        *theta), 2)*pow(cos(beta*pi*(r - rI)/(rI - rO)), 2) + 8*pow(beta, 2)*pow(pi, 2)*pow(r, 2)*rO \
        *pow(u0, 2)*pow(cos((1.0/2.0)*alpha*theta), 2)*pow(cos(beta*pi*(r - rI)/(rI - rO)), 2) - 8 \
        *pow(beta, 2)*pow(pi, 2)*r*pow(rI, 2)*cos((1.0/2.0)*alpha*theta) + 8*pow(beta, 2)*pow(pi, 2)*r \
        *rI*rO*cos((1.0/2.0)*alpha*theta))*sin(theta)/(8*pow(beta, 2)*pow(pi, 2)*pow(r, 3)*rI - 8 \
        *pow(beta, 2)*pow(pi, 2)*pow(r, 3)*rO);
}

// Function g
inline double g(double x, double y) {
    double r = sqrt(pow(x, 2) + pow(y, 2));
    double theta = atan2(y, x);
    double res = 0;
    return res;
}

#endif
