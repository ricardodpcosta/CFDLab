// Auto-generated by generate_code.py

#ifndef INSE_02_H

#define INSE_02_H

#include <cmath>

// Global constants
double rO = 1.0;
double rI = 0.5;
double nu = 1.0;
double rho = 1.0;
double omegaO = 1.0;
double omegaI = -2.0;
double pi = 3.141592653589793;

// Function p
inline double p(double x, double y) {
    double res = rho*((1.0/2.0)*pow(r, 2)*pow(-omegaI*pow(rI, 2) + omegaO*pow(rO, 2), 2)/pow( \
        -pow(rI, 2) + pow(rO, 2), 2) + 2*pow(rI, 2)*pow(rO, 2)*(-omegaI + omegaO)*(-omegaI \
        *pow(rI, 2) + omegaO*pow(rO, 2))*log(r)/pow(-pow(rI, 2) + pow(rO, 2), 2) - 1.0/2.0 \
        *pow(rI, 4)*pow(rO, 4)*pow(-omegaI + omegaO, 2)/(pow(r, 2)*pow(-pow(rI, 2) \
        + pow(rO, 2), 2)) - (-cI + cO)/(pi*(-pow(rI, 2) + pow(rO, 2))));
    return res;
}

// Function u
inline void u(double x, double y, double res[2]) {
    res[0] = -(r*(-omegaI*pow(rI, 2) + omegaO*pow(rO, 2))/(-pow(rI, 2) + pow(rO, 2)) + pow(rI, 2) \
        *pow(rO, 2)*(-omegaI + omegaO)/(r*(-pow(rI, 2) + pow(rO, 2))))*sin(theta);
    res[1] = (r*(-omegaI*pow(rI, 2) + omegaO*pow(rO, 2))/(-pow(rI, 2) + pow(rO, 2)) + pow(rI, 2) \
        *pow(rO, 2)*(-omegaI + omegaO)/(r*(-pow(rI, 2) + pow(rO, 2))))*cos(theta);
}

// Function f
inline void f(double x, double y, double res[2]) {
    res[0] = 0;
    res[1] = 0;
}

// Function g
inline double g(double x, double y) {
    double res = 0;
    return res;
}

#endif
